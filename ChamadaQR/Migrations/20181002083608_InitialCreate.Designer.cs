// <auto-generated />
using System;
using ChamadaQR.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChamadaQR.Migrations
{
    [DbContext(typeof(IESContext))]
    [Migration("20181002083608_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChamadaQR.Models.Infra.UsuarioDaAplicacao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Modelo.Cadastros.Aluno", b =>
                {
                    b.Property<long?>("AlunoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AlunoNome");

                    b.Property<long>("Matricula");

                    b.Property<long?>("ProjetoID");

                    b.Property<string>("Status");

                    b.HasKey("AlunoID");

                    b.HasIndex("ProjetoID");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("Modelo.Cadastros.Calendario", b =>
                {
                    b.Property<long?>("DataID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DataNome");

                    b.HasKey("DataID");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("Modelo.Cadastros.Frequencia", b =>
                {
                    b.Property<long?>("FrequenciaID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AlunoID");

                    b.Property<long?>("DataID");

                    b.Property<string>("Justificativa");

                    b.Property<string>("Presenca");

                    b.HasKey("FrequenciaID");

                    b.HasIndex("AlunoID");

                    b.HasIndex("DataID");

                    b.ToTable("Frequencia");
                });

            modelBuilder.Entity("Modelo.Cadastros.Professor", b =>
                {
                    b.Property<long?>("ProfessorID")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Matricula");

                    b.Property<string>("ProfessorNome");

                    b.Property<long?>("ProjetoID");

                    b.Property<string>("Status");

                    b.HasKey("ProfessorID");

                    b.HasIndex("ProjetoID");

                    b.ToTable("Professor");
                });

            modelBuilder.Entity("Modelo.Cadastros.Projeto", b =>
                {
                    b.Property<long?>("ProjetoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Endereco");

                    b.Property<string>("ProjetoNome");

                    b.HasKey("ProjetoID");

                    b.ToTable("Projeto");
                });

            modelBuilder.Entity("Modelo.Cadastros.Qrcode", b =>
                {
                    b.Property<long?>("QrCodeID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Validacao");

                    b.HasKey("QrCodeID");

                    b.ToTable("Qrcode");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ChamadaQR.Models.Infra.UsuarioDaAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ChamadaQR.Models.Infra.UsuarioDaAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ChamadaQR.Models.Infra.UsuarioDaAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ChamadaQR.Models.Infra.UsuarioDaAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Modelo.Cadastros.Aluno", b =>
                {
                    b.HasOne("Modelo.Cadastros.Projeto", "Projeto")
                        .WithMany("Alunos")
                        .HasForeignKey("ProjetoID");
                });

            modelBuilder.Entity("Modelo.Cadastros.Frequencia", b =>
                {
                    b.HasOne("Modelo.Cadastros.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID");

                    b.HasOne("Modelo.Cadastros.Calendario", "Calendario")
                        .WithMany("Frequencias")
                        .HasForeignKey("DataID");
                });

            modelBuilder.Entity("Modelo.Cadastros.Professor", b =>
                {
                    b.HasOne("Modelo.Cadastros.Projeto", "Projeto")
                        .WithMany("Professores")
                        .HasForeignKey("ProjetoID");
                });
#pragma warning restore 612, 618
        }
    }
}
